// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jarvis.proto

package generated

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcessAudioResponse_ProcessAudioResponseCode int32

const (
	ProcessAudioResponse_ERROR    ProcessAudioResponse_ProcessAudioResponseCode = 0
	ProcessAudioResponse_ACCEPTED ProcessAudioResponse_ProcessAudioResponseCode = 1
)

var ProcessAudioResponse_ProcessAudioResponseCode_name = map[int32]string{
	0: "ERROR",
	1: "ACCEPTED",
}

var ProcessAudioResponse_ProcessAudioResponseCode_value = map[string]int32{
	"ERROR":    0,
	"ACCEPTED": 1,
}

func (x ProcessAudioResponse_ProcessAudioResponseCode) String() string {
	return proto.EnumName(ProcessAudioResponse_ProcessAudioResponseCode_name, int32(x))
}

func (ProcessAudioResponse_ProcessAudioResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{1, 0}
}

type TextEventResponse_ProcessAudioResponseCode int32

const (
	TextEventResponse_ERROR    TextEventResponse_ProcessAudioResponseCode = 0
	TextEventResponse_ACCEPTED TextEventResponse_ProcessAudioResponseCode = 1
)

var TextEventResponse_ProcessAudioResponseCode_name = map[int32]string{
	0: "ERROR",
	1: "ACCEPTED",
}

var TextEventResponse_ProcessAudioResponseCode_value = map[string]int32{
	"ERROR":    0,
	"ACCEPTED": 1,
}

func (x TextEventResponse_ProcessAudioResponseCode) String() string {
	return proto.EnumName(TextEventResponse_ProcessAudioResponseCode_name, int32(x))
}

func (TextEventResponse_ProcessAudioResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{3, 0}
}

type OutputResponse_AudioOutputResponseCode int32

const (
	OutputResponse_ERROR    OutputResponse_AudioOutputResponseCode = 0
	OutputResponse_ACCEPTED OutputResponse_AudioOutputResponseCode = 1
)

var OutputResponse_AudioOutputResponseCode_name = map[int32]string{
	0: "ERROR",
	1: "ACCEPTED",
}

var OutputResponse_AudioOutputResponseCode_value = map[string]int32{
	"ERROR":    0,
	"ACCEPTED": 1,
}

func (x OutputResponse_AudioOutputResponseCode) String() string {
	return proto.EnumName(OutputResponse_AudioOutputResponseCode_name, int32(x))
}

func (OutputResponse_AudioOutputResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{5, 0}
}

type ProcessAudioRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	SourceId             string   `protobuf:"bytes,2,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	AudioStartTime       uint64   `protobuf:"varint,3,opt,name=AudioStartTime,proto3" json:"AudioStartTime,omitempty"`
	AudioData            []byte   `protobuf:"bytes,5,opt,name=AudioData,proto3" json:"AudioData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessAudioRequest) Reset()         { *m = ProcessAudioRequest{} }
func (m *ProcessAudioRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessAudioRequest) ProtoMessage()    {}
func (*ProcessAudioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{0}
}

func (m *ProcessAudioRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessAudioRequest.Unmarshal(m, b)
}
func (m *ProcessAudioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessAudioRequest.Marshal(b, m, deterministic)
}
func (m *ProcessAudioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessAudioRequest.Merge(m, src)
}
func (m *ProcessAudioRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessAudioRequest.Size(m)
}
func (m *ProcessAudioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessAudioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessAudioRequest proto.InternalMessageInfo

func (m *ProcessAudioRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ProcessAudioRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ProcessAudioRequest) GetAudioStartTime() uint64 {
	if m != nil {
		return m.AudioStartTime
	}
	return 0
}

func (m *ProcessAudioRequest) GetAudioData() []byte {
	if m != nil {
		return m.AudioData
	}
	return nil
}

type ProcessAudioResponse struct {
	RequestId            string                                        `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ResponseCode         ProcessAudioResponse_ProcessAudioResponseCode `protobuf:"varint,2,opt,name=ResponseCode,proto3,enum=ProcessAudioResponse_ProcessAudioResponseCode" json:"ResponseCode,omitempty"`
	AudioStartTime       uint64                                        `protobuf:"varint,3,opt,name=AudioStartTime,proto3" json:"AudioStartTime,omitempty"`
	Output               string                                        `protobuf:"bytes,4,opt,name=Output,proto3" json:"Output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *ProcessAudioResponse) Reset()         { *m = ProcessAudioResponse{} }
func (m *ProcessAudioResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessAudioResponse) ProtoMessage()    {}
func (*ProcessAudioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{1}
}

func (m *ProcessAudioResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessAudioResponse.Unmarshal(m, b)
}
func (m *ProcessAudioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessAudioResponse.Marshal(b, m, deterministic)
}
func (m *ProcessAudioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessAudioResponse.Merge(m, src)
}
func (m *ProcessAudioResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessAudioResponse.Size(m)
}
func (m *ProcessAudioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessAudioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessAudioResponse proto.InternalMessageInfo

func (m *ProcessAudioResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ProcessAudioResponse) GetResponseCode() ProcessAudioResponse_ProcessAudioResponseCode {
	if m != nil {
		return m.ResponseCode
	}
	return ProcessAudioResponse_ERROR
}

func (m *ProcessAudioResponse) GetAudioStartTime() uint64 {
	if m != nil {
		return m.AudioStartTime
	}
	return 0
}

func (m *ProcessAudioResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type TextEventRequest struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	SourceId             string   `protobuf:"bytes,2,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	Text                 string   `protobuf:"bytes,4,opt,name=Text,proto3" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextEventRequest) Reset()         { *m = TextEventRequest{} }
func (m *TextEventRequest) String() string { return proto.CompactTextString(m) }
func (*TextEventRequest) ProtoMessage()    {}
func (*TextEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{2}
}

func (m *TextEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextEventRequest.Unmarshal(m, b)
}
func (m *TextEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextEventRequest.Marshal(b, m, deterministic)
}
func (m *TextEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextEventRequest.Merge(m, src)
}
func (m *TextEventRequest) XXX_Size() int {
	return xxx_messageInfo_TextEventRequest.Size(m)
}
func (m *TextEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TextEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TextEventRequest proto.InternalMessageInfo

func (m *TextEventRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TextEventRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *TextEventRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TextEventResponse struct {
	RequestId            string                                     `protobuf:"bytes,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	SourceId             string                                     `protobuf:"bytes,2,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	ResponseCode         TextEventResponse_ProcessAudioResponseCode `protobuf:"varint,3,opt,name=responseCode,proto3,enum=TextEventResponse_ProcessAudioResponseCode" json:"responseCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *TextEventResponse) Reset()         { *m = TextEventResponse{} }
func (m *TextEventResponse) String() string { return proto.CompactTextString(m) }
func (*TextEventResponse) ProtoMessage()    {}
func (*TextEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{3}
}

func (m *TextEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextEventResponse.Unmarshal(m, b)
}
func (m *TextEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextEventResponse.Marshal(b, m, deterministic)
}
func (m *TextEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextEventResponse.Merge(m, src)
}
func (m *TextEventResponse) XXX_Size() int {
	return xxx_messageInfo_TextEventResponse.Size(m)
}
func (m *TextEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TextEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TextEventResponse proto.InternalMessageInfo

func (m *TextEventResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TextEventResponse) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *TextEventResponse) GetResponseCode() TextEventResponse_ProcessAudioResponseCode {
	if m != nil {
		return m.ResponseCode
	}
	return TextEventResponse_ERROR
}

type OutputRequest struct {
	SinkId               string   `protobuf:"bytes,1,opt,name=SinkId,proto3" json:"SinkId,omitempty"`
	RequestId            string   `protobuf:"bytes,2,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	MediaURL             string   `protobuf:"bytes,4,opt,name=MediaURL,proto3" json:"MediaURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutputRequest) Reset()         { *m = OutputRequest{} }
func (m *OutputRequest) String() string { return proto.CompactTextString(m) }
func (*OutputRequest) ProtoMessage()    {}
func (*OutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{4}
}

func (m *OutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputRequest.Unmarshal(m, b)
}
func (m *OutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputRequest.Marshal(b, m, deterministic)
}
func (m *OutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputRequest.Merge(m, src)
}
func (m *OutputRequest) XXX_Size() int {
	return xxx_messageInfo_OutputRequest.Size(m)
}
func (m *OutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutputRequest proto.InternalMessageInfo

func (m *OutputRequest) GetSinkId() string {
	if m != nil {
		return m.SinkId
	}
	return ""
}

func (m *OutputRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *OutputRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *OutputRequest) GetMediaURL() string {
	if m != nil {
		return m.MediaURL
	}
	return ""
}

type OutputResponse struct {
	RequestId            uint64                                 `protobuf:"varint,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	SinkId               string                                 `protobuf:"bytes,2,opt,name=SinkId,proto3" json:"SinkId,omitempty"`
	ResponseCode         OutputResponse_AudioOutputResponseCode `protobuf:"varint,3,opt,name=ResponseCode,proto3,enum=OutputResponse_AudioOutputResponseCode" json:"ResponseCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *OutputResponse) Reset()         { *m = OutputResponse{} }
func (m *OutputResponse) String() string { return proto.CompactTextString(m) }
func (*OutputResponse) ProtoMessage()    {}
func (*OutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83d9eab90a0cfa3, []int{5}
}

func (m *OutputResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputResponse.Unmarshal(m, b)
}
func (m *OutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputResponse.Marshal(b, m, deterministic)
}
func (m *OutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputResponse.Merge(m, src)
}
func (m *OutputResponse) XXX_Size() int {
	return xxx_messageInfo_OutputResponse.Size(m)
}
func (m *OutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OutputResponse proto.InternalMessageInfo

func (m *OutputResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *OutputResponse) GetSinkId() string {
	if m != nil {
		return m.SinkId
	}
	return ""
}

func (m *OutputResponse) GetResponseCode() OutputResponse_AudioOutputResponseCode {
	if m != nil {
		return m.ResponseCode
	}
	return OutputResponse_ERROR
}

func init() {
	proto.RegisterEnum("ProcessAudioResponse_ProcessAudioResponseCode", ProcessAudioResponse_ProcessAudioResponseCode_name, ProcessAudioResponse_ProcessAudioResponseCode_value)
	proto.RegisterEnum("TextEventResponse_ProcessAudioResponseCode", TextEventResponse_ProcessAudioResponseCode_name, TextEventResponse_ProcessAudioResponseCode_value)
	proto.RegisterEnum("OutputResponse_AudioOutputResponseCode", OutputResponse_AudioOutputResponseCode_name, OutputResponse_AudioOutputResponseCode_value)
	proto.RegisterType((*ProcessAudioRequest)(nil), "ProcessAudioRequest")
	proto.RegisterType((*ProcessAudioResponse)(nil), "ProcessAudioResponse")
	proto.RegisterType((*TextEventRequest)(nil), "TextEventRequest")
	proto.RegisterType((*TextEventResponse)(nil), "TextEventResponse")
	proto.RegisterType((*OutputRequest)(nil), "OutputRequest")
	proto.RegisterType((*OutputResponse)(nil), "OutputResponse")
}

func init() { proto.RegisterFile("jarvis.proto", fileDescriptor_f83d9eab90a0cfa3) }

var fileDescriptor_f83d9eab90a0cfa3 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xd7, 0x6d, 0xb7, 0xda, 0xcc, 0x86, 0xd0, 0x35, 0xcb, 0x12, 0x55, 0x1c, 0x2a, 0x1f,
	0xa0, 0x12, 0x92, 0x85, 0xb2, 0x17, 0x4e, 0x48, 0xa5, 0xdb, 0xc3, 0xf2, 0x47, 0xad, 0xdc, 0x72,
	0xe1, 0x44, 0xda, 0x58, 0x28, 0x20, 0xea, 0xe2, 0x38, 0x2b, 0x5e, 0x84, 0x67, 0xe2, 0x01, 0x78,
	0x1e, 0x24, 0x14, 0xd7, 0x49, 0x9c, 0x34, 0x41, 0xa8, 0xdc, 0x32, 0x13, 0xfb, 0x9b, 0x6f, 0x7e,
	0x33, 0x32, 0xb8, 0x9f, 0x43, 0x79, 0x17, 0x27, 0x74, 0x27, 0x85, 0x12, 0xe4, 0x07, 0x82, 0x07,
	0x0b, 0x29, 0x36, 0x3c, 0x49, 0x26, 0x69, 0x14, 0x0b, 0xc6, 0xbf, 0xa5, 0x3c, 0x51, 0xf8, 0x31,
	0x38, 0xe6, 0xf3, 0x36, 0xf2, 0xd1, 0x08, 0x8d, 0x1d, 0x56, 0x26, 0xf0, 0x10, 0xce, 0x96, 0x22,
	0x95, 0x1b, 0x7e, 0x1b, 0xf9, 0x1d, 0xfd, 0xb3, 0x88, 0xf1, 0x13, 0xf0, 0xb4, 0xd2, 0x52, 0x85,
	0x52, 0xad, 0xe2, 0xaf, 0xdc, 0xef, 0x8e, 0xd0, 0xb8, 0xc7, 0x6a, 0xd9, 0xac, 0x82, 0xce, 0xdc,
	0x84, 0x2a, 0xf4, 0x4f, 0x47, 0x68, 0xec, 0xb2, 0x32, 0x41, 0x7e, 0x23, 0xb8, 0xac, 0xfa, 0x4a,
	0x76, 0x62, 0x9b, 0xe8, 0x6b, 0xb2, 0x6e, 0xac, 0x48, 0x60, 0x06, 0x6e, 0x7e, 0x72, 0x2a, 0x22,
	0xae, 0xcd, 0x79, 0x01, 0xa5, 0x4d, 0x52, 0x8d, 0xc9, 0xec, 0x16, 0xab, 0x68, 0xfc, 0x73, 0x43,
	0x57, 0xd0, 0x9f, 0xa7, 0x6a, 0x97, 0x2a, 0xbf, 0xa7, 0x6d, 0x99, 0x88, 0x5c, 0x83, 0xdf, 0x56,
	0x09, 0x3b, 0x70, 0x3a, 0x63, 0x6c, 0xce, 0x06, 0x27, 0xd8, 0x85, 0xb3, 0xc9, 0x74, 0x3a, 0x5b,
	0xac, 0x66, 0x37, 0x03, 0x44, 0x3e, 0xc2, 0x60, 0xc5, 0xbf, 0xab, 0xd9, 0x1d, 0xdf, 0xaa, 0xff,
	0x9f, 0x09, 0x86, 0x5e, 0xa6, 0x66, 0x8c, 0xe9, 0x6f, 0xf2, 0x0b, 0xc1, 0x85, 0x55, 0xa2, 0xc4,
	0x7b, 0x64, 0x8d, 0x39, 0xb8, 0xd2, 0x46, 0xdf, 0xd5, 0xe8, 0x9f, 0xd1, 0x83, 0x1a, 0x7f, 0xe1,
	0x6e, 0x0b, 0x1c, 0xc7, 0x2d, 0x85, 0x7b, 0x7b, 0xec, 0x39, 0xb4, 0x2b, 0xe8, 0x2f, 0xe3, 0xed,
	0x97, 0xa2, 0x1b, 0x13, 0x55, 0x1b, 0xed, 0xd4, 0x1b, 0xcd, 0x81, 0x75, 0x4b, 0x60, 0x59, 0xf3,
	0xef, 0x78, 0x14, 0x87, 0xef, 0xd9, 0x5b, 0x03, 0xb2, 0x88, 0xc9, 0x4f, 0x04, 0x5e, 0x5e, 0xb7,
	0x8d, 0x64, 0xcf, 0x2e, 0x50, 0xda, 0xea, 0x54, 0x6c, 0xbd, 0xa9, 0x2d, 0xf0, 0x9e, 0xe2, 0x53,
	0x5a, 0x15, 0xa7, 0x9a, 0x48, 0x35, 0x77, 0xb8, 0xb9, 0x24, 0x80, 0x47, 0x2d, 0x07, 0x5b, 0x01,
	0x06, 0x0b, 0xb3, 0xed, 0x06, 0xbd, 0x90, 0xf8, 0x25, 0x38, 0xcb, 0x74, 0x9d, 0x6c, 0x64, 0xbc,
	0xe6, 0xf8, 0x92, 0x36, 0xbc, 0x16, 0xc3, 0x87, 0x8d, 0x33, 0x25, 0x27, 0x63, 0xf4, 0x1c, 0x05,
	0xaf, 0xc1, 0xb3, 0xe6, 0x1f, 0x71, 0x89, 0x5f, 0xd8, 0x8a, 0x17, 0xb4, 0xbe, 0xe8, 0x43, 0x7c,
	0xb8, 0x34, 0x46, 0x6b, 0x02, 0xe7, 0x56, 0x47, 0x38, 0xb0, 0x85, 0x3c, 0x5a, 0x99, 0xfc, 0xf0,
	0x7e, 0x0d, 0xda, 0x5e, 0xe2, 0xd5, 0xf9, 0x07, 0xe7, 0x13, 0xdf, 0x72, 0x19, 0x2a, 0x1e, 0xad,
	0xfb, 0xfa, 0x15, 0xbc, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x46, 0x4e, 0xb0, 0x73, 0x15, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AudioProcessorClient is the client API for AudioProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioProcessorClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (AudioProcessor_SubscribeClient, error)
}

type audioProcessorClient struct {
	cc *grpc.ClientConn
}

func NewAudioProcessorClient(cc *grpc.ClientConn) AudioProcessorClient {
	return &audioProcessorClient{cc}
}

func (c *audioProcessorClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (AudioProcessor_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AudioProcessor_serviceDesc.Streams[0], "/AudioProcessor/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioProcessorSubscribeClient{stream}
	return x, nil
}

type AudioProcessor_SubscribeClient interface {
	Send(*ProcessAudioRequest) error
	Recv() (*ProcessAudioResponse, error)
	grpc.ClientStream
}

type audioProcessorSubscribeClient struct {
	grpc.ClientStream
}

func (x *audioProcessorSubscribeClient) Send(m *ProcessAudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioProcessorSubscribeClient) Recv() (*ProcessAudioResponse, error) {
	m := new(ProcessAudioResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioProcessorServer is the server API for AudioProcessor service.
type AudioProcessorServer interface {
	Subscribe(AudioProcessor_SubscribeServer) error
}

// UnimplementedAudioProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedAudioProcessorServer struct {
}

func (*UnimplementedAudioProcessorServer) Subscribe(srv AudioProcessor_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterAudioProcessorServer(s *grpc.Server, srv AudioProcessorServer) {
	s.RegisterService(&_AudioProcessor_serviceDesc, srv)
}

func _AudioProcessor_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioProcessorServer).Subscribe(&audioProcessorSubscribeServer{stream})
}

type AudioProcessor_SubscribeServer interface {
	Send(*ProcessAudioResponse) error
	Recv() (*ProcessAudioRequest, error)
	grpc.ServerStream
}

type audioProcessorSubscribeServer struct {
	grpc.ServerStream
}

func (x *audioProcessorSubscribeServer) Send(m *ProcessAudioResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioProcessorSubscribeServer) Recv() (*ProcessAudioRequest, error) {
	m := new(ProcessAudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AudioProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AudioProcessor",
	HandlerType: (*AudioProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AudioProcessor_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jarvis.proto",
}

// EventResponderClient is the client API for EventResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventResponderClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventResponder_SubscribeClient, error)
}

type eventResponderClient struct {
	cc *grpc.ClientConn
}

func NewEventResponderClient(cc *grpc.ClientConn) EventResponderClient {
	return &eventResponderClient{cc}
}

func (c *eventResponderClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventResponder_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventResponder_serviceDesc.Streams[0], "/EventResponder/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventResponderSubscribeClient{stream}
	return x, nil
}

type EventResponder_SubscribeClient interface {
	Send(*TextEventRequest) error
	Recv() (*TextEventResponse, error)
	grpc.ClientStream
}

type eventResponderSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventResponderSubscribeClient) Send(m *TextEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventResponderSubscribeClient) Recv() (*TextEventResponse, error) {
	m := new(TextEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventResponderServer is the server API for EventResponder service.
type EventResponderServer interface {
	Subscribe(EventResponder_SubscribeServer) error
}

// UnimplementedEventResponderServer can be embedded to have forward compatible implementations.
type UnimplementedEventResponderServer struct {
}

func (*UnimplementedEventResponderServer) Subscribe(srv EventResponder_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterEventResponderServer(s *grpc.Server, srv EventResponderServer) {
	s.RegisterService(&_EventResponder_serviceDesc, srv)
}

func _EventResponder_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventResponderServer).Subscribe(&eventResponderSubscribeServer{stream})
}

type EventResponder_SubscribeServer interface {
	Send(*TextEventResponse) error
	Recv() (*TextEventRequest, error)
	grpc.ServerStream
}

type eventResponderSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventResponderSubscribeServer) Send(m *TextEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventResponderSubscribeServer) Recv() (*TextEventRequest, error) {
	m := new(TextEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EventResponder",
	HandlerType: (*EventResponderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventResponder_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jarvis.proto",
}

// AudioOutputClient is the client API for AudioOutput service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioOutputClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (AudioOutput_SubscribeClient, error)
}

type audioOutputClient struct {
	cc *grpc.ClientConn
}

func NewAudioOutputClient(cc *grpc.ClientConn) AudioOutputClient {
	return &audioOutputClient{cc}
}

func (c *audioOutputClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (AudioOutput_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AudioOutput_serviceDesc.Streams[0], "/AudioOutput/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioOutputSubscribeClient{stream}
	return x, nil
}

type AudioOutput_SubscribeClient interface {
	Send(*OutputRequest) error
	Recv() (*OutputResponse, error)
	grpc.ClientStream
}

type audioOutputSubscribeClient struct {
	grpc.ClientStream
}

func (x *audioOutputSubscribeClient) Send(m *OutputRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioOutputSubscribeClient) Recv() (*OutputResponse, error) {
	m := new(OutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioOutputServer is the server API for AudioOutput service.
type AudioOutputServer interface {
	Subscribe(AudioOutput_SubscribeServer) error
}

// UnimplementedAudioOutputServer can be embedded to have forward compatible implementations.
type UnimplementedAudioOutputServer struct {
}

func (*UnimplementedAudioOutputServer) Subscribe(srv AudioOutput_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterAudioOutputServer(s *grpc.Server, srv AudioOutputServer) {
	s.RegisterService(&_AudioOutput_serviceDesc, srv)
}

func _AudioOutput_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioOutputServer).Subscribe(&audioOutputSubscribeServer{stream})
}

type AudioOutput_SubscribeServer interface {
	Send(*OutputResponse) error
	Recv() (*OutputRequest, error)
	grpc.ServerStream
}

type audioOutputSubscribeServer struct {
	grpc.ServerStream
}

func (x *audioOutputSubscribeServer) Send(m *OutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioOutputSubscribeServer) Recv() (*OutputRequest, error) {
	m := new(OutputRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AudioOutput_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AudioOutput",
	HandlerType: (*AudioOutputServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AudioOutput_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jarvis.proto",
}
